{
	"name": "dataflow_weather",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "bronze_weather_historical",
						"type": "DatasetReference"
					},
					"name": "sourceweather"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "silver_weather_historical",
						"type": "DatasetReference"
					},
					"name": "sinkweather"
				},
				{
					"dataset": {
						"referenceName": "silver_weather_historical_csv",
						"type": "DatasetReference"
					},
					"name": "sinkweathercsv",
					"description": "Export data to silver_weather_historical_csv"
				}
			],
			"transformations": [
				{
					"name": "flattenweather"
				},
				{
					"name": "tslocationweather"
				},
				{
					"name": "filternullweather"
				},
				{
					"name": "derivedweather"
				},
				{
					"name": "selectdropweather"
				},
				{
					"name": "flattenlist"
				}
			],
			"scriptLines": [
				"source(output(",
				"          message as string,",
				"          cod as string,",
				"          city_id as integer,",
				"          calctime as double,",
				"          cnt as integer,",
				"          list as (dt as integer, main as (temp as double, feels_like as double, pressure as integer, humidity as integer, temp_min as double, temp_max as double), wind as (speed as double, deg as integer, gust as double), clouds as (all as integer), weather as (id as integer, main as string, description as string, icon as string)[], rain as ({1h} as double))[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     wildcardPaths:['data_*.json']) ~> sourceweather",
				"flattenlist foldDown(unroll(weather, weather),",
				"     mapColumn(",
				"          calctime,",
				"          city_id,",
				"          cnt,",
				"          cod,",
				"          message,",
				"          clouds_all = clouds.all,",
				"          timestamp,",
				"          feels_like = main.feels_like,",
				"          humidity = main.humidity,",
				"          pressure = main.pressure,",
				"          temp = main.temp,",
				"          temp_max = main.temp_max,",
				"          temp_min = main.temp_min,",
				"          weather_description = weather.description,",
				"          weather_icon = weather.icon,",
				"          weather_id = weather.id,",
				"          weather_main = weather.main,",
				"          wind_deg = wind.deg,",
				"          wind_speed = wind.speed,",
				"          wind_gust = wind.gust,",
				"          rain_1h = rain.{1h}",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenweather",
				"flattenweather derive(corrected_timestamp = iif(length(toString(timestamp)) == 10, toInteger(timestamp), toInteger(null())),",
				"          location = 'Boston') ~> tslocationweather",
				"tslocationweather filter((!isNull(corrected_timestamp))&&(!isNull(temp))&&(!isNull(humidity))) ~> filternullweather",
				"filternullweather derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000),",
				"          id = concat(location, toString(corrected_timestamp)),",
				"          temp_C = round(temp - 273.15, 2),",
				"          temp_min_C = round(temp_min - 273.15, 2),",
				"          temp_max_C = round(temp_max - 273.15, 2),",
				"          feels_like_C = round(feels_like - 273.15, 2),",
				"          temp_F = round((temp - 273.15) * 1.8 + 32, 2),",
				"          temp_min_F = round((temp_min - 273.15) * 1.8 + 32, 2),",
				"          temp_max_F = round((temp_max - 273.15) * 1.8 + 32, 2),",
				"          feels_like_F = round((feels_like - 273.15) * 1.8 + 32, 2),",
				"          lat = 42.3601,",
				"          lon = -71.0589,",
				"          weather_id_value = toInteger(weather_id),",
				"          weather_main_value = toString(weather_main),",
				"          weather_description_value = toString(weather_description),",
				"          weather_icon_value = toString(weather_icon),",
				"          rain_1h = iif(isNull(rain_1h), toFloat(0.0), toFloat(rain_1h))) ~> derivedweather",
				"derivedweather select(mapColumn(",
				"          clouds_all,",
				"          humidity,",
				"          pressure,",
				"          temp_K = temp,",
				"          temp_min_K = temp_min,",
				"          temp_max_K = temp_max,",
				"          feels_like_K = feels_like,",
				"          wind_deg,",
				"          wind_gust,",
				"          wind_speed,",
				"          rain_1h,",
				"          corrected_timestamp,",
				"          location,",
				"          date_time,",
				"          id,",
				"          temp_C,",
				"          temp_min_C,",
				"          temp_max_C,",
				"          feels_like_C,",
				"          temp_F,",
				"          temp_min_F,",
				"          temp_max_F,",
				"          feels_like_F,",
				"          lat,",
				"          lon,",
				"          weather_id_value,",
				"          weather_main_value,",
				"          weather_description_value,",
				"          weather_icon_value",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectdropweather",
				"sourceweather foldDown(unroll(list, list),",
				"     mapColumn(",
				"          message,",
				"          cod,",
				"          city_id,",
				"          calctime,",
				"          cnt,",
				"          timestamp = list.dt,",
				"          main = list.main,",
				"          wind = list.wind,",
				"          clouds = list.clouds,",
				"          weather = list.weather,",
				"          rain = list.rain",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenlist",
				"selectdropweather sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['silver_weather_historical.parquet'],",
				"     umask: 0770,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkweather",
				"selectdropweather sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['silver_weather_historical.csv'],",
				"     umask: 0770,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkweathercsv"
			]
		}
	}
}