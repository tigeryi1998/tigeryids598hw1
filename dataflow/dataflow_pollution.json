{
	"name": "dataflow_pollution",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "bronze_pollution_historical",
						"type": "DatasetReference"
					},
					"name": "sourcepollution"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "flattenpollution"
				},
				{
					"name": "tslocationpollution"
				},
				{
					"name": "filterpollution"
				},
				{
					"name": "derivedpollution"
				}
			],
			"scriptLines": [
				"source(output(",
				"          coord as (lon as double, lat as double),",
				"          list as (main as (aqi as integer), components as (co as double, no as integer, no2 as double, o3 as double, so2 as double, pm2_5 as double, pm10 as double, nh3 as double), dt as integer)[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> sourcepollution",
				"sourcepollution foldDown(unroll(list),",
				"     mapColumn(",
				"          lat = coord.lat,",
				"          lon = coord.lon,",
				"          timestamp = list.dt,",
				"          aqi = list.main.aqi,",
				"          co = list.components.co,",
				"          no = list.components.no,",
				"          no2 = list.components.no2,",
				"          o3 = list.components.o3,",
				"          so2 = list.components.so2,",
				"          pm2_5 = list.components.pm2_5,",
				"          pm10 = list.components.pm10,",
				"          nh3 = list.components.nh3",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenpollution",
				"flattenpollution derive(corrected_timestamp = iif(length(toString(timestamp)) == 10, toInteger(timestamp), toInteger(null())),",
				"          {location } = 'Boston') ~> tslocationpollution",
				"tslocationpollution filter((!isNull(corrected_timestamp))&&(!isNull(aqi))) ~> filterpollution",
				"filterpollution derive() ~> derivedpollution"
			]
		}
	}
}